** Consultar los remote, que tenemos configurados en el proyecto para
hacer el push

git remote -v

origin  https://github.com/GabrielBetinV/GIT-GITHUB.git (fetch) => Obtener
origin  https://github.com/GabrielBetinV/GIT-GITHUB.git (push)  => Enviar

** git push -u origin master,  esto es para enviar el cambio o codigo fuente a 
git hub a la rama master

Despues de este comando, solicita las credenciales, perola idea es guardar
por defecto para que no solicite siempre:

https://docs.github.com/es/get-started/getting-started-with-git/caching-your-github-credentials-in-git#platform-windows

** Crear repositiorio y  Realizar el primer push

Al crear el primer repositorio, Giut HUb muestra enventana como realizar el push de dos
mnera

=> Esta forma es cuando no tenemos inicializado git ni agregado ni commits en el proyecto

…or create a new repository on the command line
echo "# liga-justicia" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/GabrielBetinV/liga-justicia.git
git push -u origin main
…or push an existing repository from the command line
git remote add origin https://github.com/GabrielBetinV/liga-justicia.git
git branch -M main
git push -u origin main

=> Esta forma es cuando solo queremos realizar push

git remote add origin https://github.com/GabrielBetinV/liga-justicia.git
git branch -M main
git push -u origin main 

La proxima vez,  solo digitamos git push


** Push de los tags

al digitar git tag, listaremos los tags guardados en el repositorio

Los tags se deben subirlos manual, pueden ser unopor uno o todos a las vez

git push --tags => Con este codigo  subimos los tags al respositorio

Si vamos a Git HUb, se observaran los tags con estas opciones.

- Descargar en Zip el codigo fuente de ese momento
- Click en el nuemro del commit,  se abre una ventana, para ver los cambios en su miomento (split-unified)
- realizar comentarios
- Transformar en release

NOTA =>  Los releases una forma específica de utilizar los tags. Un release es 
una versión específica y estable del proyecto que se pone a disposición de 
los usuarios o colaboradores

Se crea un tag específico para marcar ese punto en la historia del repositorio
 y se le asigna un número de versión o un nombre descriptivo.


Es para indicar que es el codigo de producciom

*** Pull de los cambios realizados en el Git HUb

-Cambiar algo desde GitHUb => Se agrega comentarios al archivo readme

git pull, tener encuenta que ya tenemos previamente configurado ek origen

git pull origin main

Observaremos que el archivo readme esta actualizado con el cambio que realizaron en 
Git hub

** Warning - Pulling without reconcile strategy

", indica que se está realizando una operación de extracción (pull) en un contexto 
donde no se está aplicando una estrategia de reconciliación.

Hay que seleccionar una estrategia

git config --global pull.ff only


Observamos la configuracion

git config --global -e

al momento de realizar git lg observaremos que el HEAD apuntara  al main y al origin/main de github

* 6c5ee1d - (6 minutes ago) Update README.md - GabrielBetinV (HEAD -> main, origin/main)
* c3e22b9 - (6 years ago) Agregamos a Deadshot - Strider (tag: v2.0.0)
* 69e85f8 - (6 years ago) Actualizaciones al readme - Strider

** Clonar Repositorio

- Borrar el proyecto de heroes

- Vamos a GitHUb y vamos al boton Code para validar las opciones de clonar

- En la opcion de HTTP y copiamos el enlace https://github.com/GabrielBetinV/liga-justicia.git

- Abrimos la consola en la carpeta donde queremos guiardar el repositorio

- Digitamos

git clone https://github.com/GabrielBetinV/liga-justicia.git

Listo, se guardar el proyecto importandola de Github

Tener en cuenta que los archivos que al momento de hacer Push no se guardan
lo de gitignore, pasa igual con el pull

** Subir cambios locales al remoto

- Modificamos el readme agregando nuevos comentarios

- Realizmos el add y commit

git commit -am "Cambio Readme Desde el local"  

Al realizar el git log, nos daremnos cuenta que el commit esta en el main noen elorigin main

* ba010be - (3 seconds ago) Cambio Readme Desde el local - Gabriel Betin Valdes (HEAD -> main)
* 6c5ee1d - (16 minutes ago) Update README.md - GabrielBetinV (origin/main, origin/HEAD)
* c3e22b9 - (6 years ago) Agregamos a Deadshot - Strider (tag: v2.0.0)
* 69e85f8 - (6 years ago) Actualizaciones al readme - Strid

- Realizamos el push para subir los cambios

NOTA => Tener en cuenta que se tiene configurado elpull para que se realice siempre y cuando
se tenga un fast forward, es decir que no se tenga conflictos en los cambios,

*** Git pull Rebase

Si tenemos un conflicto, digitamos esto  ya que habiamos configurado que hiciera elpull siempre uy cuando
exita un fast foward

git config pull.rebase true
git pull

Esto nos mostrara el conflicto para solucionar

al realizar git branch observaremos que no estamos en ninguna rama, porque estamos en un
rebase

(no branch, rebasing main)
  main


Hacemos un commit, si le doy git status nos mostrara que estamos en el rebase aun

git rebase --continue para terminar

git push para enviar el proyecto con los commits unificado


NOTA =>  Podemos configuar el pull rebase de manera global

git config --global pull.rebase true



** Markdown y Github Markdown

Etiquetas, es como el html 

# Encabezado 1
## Encabezado 2
### Encabezado 3


**Texto en negrita**
*Texto en cursiva*
***Texto en negrita y cursiva***


- Elemento de lista 1
- Elemento de lista 2
- Elemento de lista 3


1. Elemento numerado 1
2. Elemento numerado 2
3. Elemento numerado 3

[Texto del enlace](URL del enlace)

![Texto alternativo](URL de la imagen)

`Código en línea`

> Esto es una cita.

---

| Encabezado 1 | Encabezado 2 |
|--------------|--------------|
| Celda 1      | Celda 2      |
| Celda 3      | Celda 4      |


Markdown de GitHub
Tutorial de Markdown:

https://www.markdowntutorial.com/

GitHub Markdown sheet
https://docs.github.com/es

Emojis de GitHub
https://www.webfx.com/tools/emoji-cheat-sheet/


*** Buscar arcivos => Go to file

*** Raw, Blame, History, Edit and Delete

Raw => Ver archivo en crudo

Blame => VEr quien hizo el cambio

*** Crear archivo con Pull Request

Crear archivo en Guit HUB dentro de la carpeta historia

Al darle Crear Commits se abre una ventana y se seleeccionar un commits con pull request

Click en proponer cambios

Se abre la ventana Open a pull request

Seleccionarla rama, tambien se puede unir la rama

Crear pull rquest

Al duirigirnos a la pestaña Pull request,  se muestra que esta pendiente

Hasta que no se confirme el opull request no se pasa a la rama main
	
Para confirmar Crear merge pull requets => COnfimar merge

Se puede eliinar y restaurar los pull request

Ahora, podemos hacer pull en el repositorio local para traer el  cambio

** Git fetch

es un comando utilizado en Git para descargar los últimos cambios de 
un repositorio remoto sin fusionarlos con la rama de trabajo actual.

Se utiliza solo pra actualizar referencias,es decir, trae los c<mbios pero nofusionan la rama

** Flujo de Git hub

https://blog.mergify.com/understanding-the-github-pull-request-workflow/

** Fork, clone  y colaboraciones

- Git Clone, clona el repositorio y si nos agregan como colaboradores, podriamos hacer
Push al repositorio

 un "fork" se refiere a una copia independiente de un repositorio en un usuario diferente.
 Cuando haces un "fork" de un repositorio en GitHub, estás creando una réplica completa 
del repositorio en tu propia cuenta de GitHub. Esta copia es independiente del repositorio 
original y puedes modificarla, agregar nuevos cambios y contribuir al proyecto sin afectar 
el repositorio original.

** Cloning y fork

Click en el boton Fork y creamos el Fork, de inmediato se creara el repositorio como copia ami GitHub

Esto es para, poder clonar

git clone https://github.com/GabrielBetinV/legion-del-mal.git

Ahora si, nos convetimos en colaboradoes, y con el clon delproyecto podriamnos hacer commits, pushc rtc...


** Pull Request remitente (El que quiere colaborar)

- Vamos al repositorio clonado  en GitHub y le  hacemos un cambio
- Click en el boton Contribute
- open pull request
- create pull request
- se envia la solicitud pull request al dueño del repositorio
GabrielBetinV wants to merge 1 commit into Klerith:master from GabrielBetinV:master


** Pull Request destinatario (Dueño del repositorio)

- En la pestaña de pUll request se muestran los pull request recibidos
- En los commits, o lineas se pueden comentar alguna observacion
- En el boton FUIles Changed podemos crear comentarios, aceptar osolicitar cambios
-  El usuario  que solicito puede ver los cambios solicitados
-  El usuario que solicito debe realizar ek cambio o revertir archivos con el commit anterior o cambiar o hacer push
- El usuario remitente, le da click en Review changes , donde podra comentar, aceptar o solicitar mas cambios
- Despues se pueden hacer squas, crear merge commit o rebase (squas and merge)
- create merge
-Mergue pull request
-  COnfirmar => confirm squash and merge


**  Actualizar Fork

- Desde el repositorio padre(Main),  Al lado de la opcion Contribute esta la opcion de  =>  Fetch Upstream para dos casos

1. Comparar el cambio
2. Hacer el Mergue

- Tambien se puede hacer estas dos opciones desde la consola asi:

git remote add upstream "patch del repositorio"
git pull upstream "rama"
aceptar cambios o cualquier de las opciones
git commit -am  "dsdsdsdsd"
git rebase -continue
git push


** Flujos de trabajo

- Todos en la misma rama
- Por ramas
- Pull Request

** Tarea-Practica de los flujos

- Descargar Zip de => https://github.com/klerith/avengers (Esto no trae el historial de  commits porque no es
clone ni pull)

- Abrimos el proyecto en VS Code

- Crear repositorio en Guthub

- Iniciamos Git en el proyecto y lo pusheamos a elrepositorio


- Creamos un tags de prueba
git tag -a v0.0.1 -m "Version Alpha"
git push --tags

-  Editamos el tags para pasarlo a  Release

** Flujo de trabajo mediante pull request - Feature Branch

- Crear una rama del proyecto anterior y nos pasamos de una vez

 git checkout -b rama-villanos

- Como ya estamos en la rama, creamos un archivo villano.md y realizamos cambios
Agregamos y hacemos commit

- Subir rama con los cambios, este comando es una sola vez

 git push --set-upstream origin rama-villanos	


- En Git hub, se mostrara el mensaje de la nueva rama  y un boton para Comparar p hacer pull request

- Click en el boton de comparar y pull requets -  Able to merge. These branches can be automatically merged.

- Hacemos el pull request

- Antes del merge pull request, podriamos hacer cambios en el codigo y volver a hacer pull
y como todavia no hay merge van a aparecer los nuevos commits

- Hacemos el merge y confirmamos

- Si queremos podemos ir a ramas y borrar las que queremos desdfe git hub

- Como ya realizamos el merge, podemos ir al repositorio local, colocarnos en la rama main y realizar el pull
para tener el codigo actualizado

- Si queremos podemos borrar la rama en el repositorio local
git branc -D rama-villanos

 Si rama no se ha unido, se mostrara el mensaje de error.

git status -sb => Esto muestra  el status y la rama

Podemos actualizar el alias git s para que mustre esa informacion

git config --global -e
Entramos al modo de edicion, buscamos el alias y editamos la linea con la letra a
Editamos y esc
:wq!

- Al digitar git s se mostraran los comandos que editamos

** Limpiar ramas innecesarias

- Nos movemos a la rama main o la que necesito guardar
- HAcemos pull para tener los ultimos cambioss
- git remote prune origin => Boprrar las ramas
- git branch -a ya no mostrara los remotos mostrara la nueva rama



** Freature Branch - Revisar el trabajo del compañero

- Las ramas se pueden crear desde Git HUb, desede la opcion de buscar ramas y
escribimios el nombre, como el no lo encuentra te dice que debes crear

OJO esto es si eres el dueño del repositorio

- Creamos un nuevo archivo estando en la  nueva rama

- Vamos al repositorio local,  realizamos un git pull para traer los cambios y la nueva rama

En el caso de que no se la traiga , git pull --all

Revisamos en git branch las ramas existente

No tenemos los cambios, pero debemos hacer lo siguiete

git branch -a,  => muestra todos los remotos
Nos pasamos a ese remoto para ver los cambios
git checkout rama-misiones

ya podriamos realizar los cambios o revisar el trabajo de los compañeros

Hacemos push si es necesario en esa rama



** Rama de produccion

Este caso es cuando el usuario dice que no va a pagar mas mantenimiento
o actualizaciones del proyecto

- crear una nueva rama, git checkout -b rama-kitkat 
- Hacemos cambios, add y commit
-  Reailzamos elpush del ultimo cambio en la nueva rama  git push --set-upstream origin rama-kitkat
- Creamos el tags git tag -a v1.0.0 -m "Ultima version para el kitkat"
- realizamos el push del tags git push --tags
- Convertimos eltags en release

Es importante realizar el release por si alguien borra la rama, nos queda esa copia para
poder restaurar las versiones

Para eso vamosa ver como recuperar esta rama de produccion

** Recuperar rama

hay varias opciones

1. Realizar checkout al tags

git checkout v1.0.0
realioar el push a Git HUb

2. Realiarlo desde Git hub
para esoborramos larama local y en la nube asi

local => git branch -D rama-kitkat

nube => git push origin :rama-kikat  
 
Vamos al repositorio y damosclick como sifueramos a cambiar lrama
seleccionamos tags y buscams el tags
digitamos elnombre de la rama de como queremos crearla
crear rama apartir de tags








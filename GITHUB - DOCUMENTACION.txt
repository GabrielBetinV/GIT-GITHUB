** Consultar los remote, que tenemos configurados en el proyecto para
hacer el push

git remote -v

origin  https://github.com/GabrielBetinV/GIT-GITHUB.git (fetch) => Obtener
origin  https://github.com/GabrielBetinV/GIT-GITHUB.git (push)  => Enviar

** git push -u origin master,  esto es para enviar el cambio o codigo fuente a 
git hub a la rama master

Despues de este comando, solicita las credenciales, perola idea es guardar
por defecto para que no solicite siempre:

https://docs.github.com/es/get-started/getting-started-with-git/caching-your-github-credentials-in-git#platform-windows

** Crear repositiorio y  Realizar el primer push

Al crear el primer repositorio, Giut HUb muestra enventana como realizar el push de dos
mnera

=> Esta forma es cuando no tenemos inicializado git ni agregado ni commits en el proyecto

…or create a new repository on the command line
echo "# liga-justicia" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/GabrielBetinV/liga-justicia.git
git push -u origin main
…or push an existing repository from the command line
git remote add origin https://github.com/GabrielBetinV/liga-justicia.git
git branch -M main
git push -u origin main

=> Esta forma es cuando solo queremos realizar push

git remote add origin https://github.com/GabrielBetinV/liga-justicia.git
git branch -M main
git push -u origin main 

La proxima vez,  solo digitamos git push


** Push de los tags

al digitar git tag, listaremos los tags guardados en el repositorio

Los tags se deben subirlos manual, pueden ser unopor uno o todos a las vez

git push --tags => Con este codigo  subimos los tags al respositorio

Si vamos a Git HUb, se observaran los tags con estas opciones.

- Descargar en Zip el codigo fuente de ese momento
- Click en el nuemro del commit,  se abre una ventana, para ver los cambios en su miomento (split-unified)
- realizar comentarios
- Transformar en release

NOTA =>  Los releases una forma específica de utilizar los tags. Un release es 
una versión específica y estable del proyecto que se pone a disposición de 
los usuarios o colaboradores

Se crea un tag específico para marcar ese punto en la historia del repositorio
 y se le asigna un número de versión o un nombre descriptivo.


Es para indicar que es el codigo de producciom

*** Pull de los cambios realizados en el Git HUb

-Cambiar algo desde GitHUb => Se agrega comentarios al archivo readme

git pull, tener encuenta que ya tenemos previamente configurado ek origen

git pull origin main

Observaremos que el archivo readme esta actualizado con el cambio que realizaron en 
Git hub

** Warning - Pulling without reconcile strategy

", indica que se está realizando una operación de extracción (pull) en un contexto 
donde no se está aplicando una estrategia de reconciliación.

Hay que seleccionar una estrategia

git config --global pull.ff only


Observamos la configuracion

git config --global -e

al momento de realizar git lg observaremos que el HEAD apuntara  al main y al origin/main de github

* 6c5ee1d - (6 minutes ago) Update README.md - GabrielBetinV (HEAD -> main, origin/main)
* c3e22b9 - (6 years ago) Agregamos a Deadshot - Strider (tag: v2.0.0)
* 69e85f8 - (6 years ago) Actualizaciones al readme - Strider

** Clonar Repositorio

- Borrar el proyecto de heroes

- Vamos a GitHUb y vamos al boton Code para validar las opciones de clonar

- En la opcion de HTTP y copiamos el enlace https://github.com/GabrielBetinV/liga-justicia.git

- Abrimos la consola en la carpeta donde queremos guiardar el repositorio

- Digitamos

git clone https://github.com/GabrielBetinV/liga-justicia.git

Listo, se guardar el proyecto importandola de Github

Tener en cuenta que los archivos que al momento de hacer Push no se guardan
lo de gitignore, pasa igual con el pull

** Subir cambios locales al remoto

- Modificamos el readme agregando nuevos comentarios

- Realizmos el add y commit

git commit -am "Cambio Readme Desde el local"  

Al realizar el git log, nos daremnos cuenta que el commit esta en el main noen elorigin main

* ba010be - (3 seconds ago) Cambio Readme Desde el local - Gabriel Betin Valdes (HEAD -> main)
* 6c5ee1d - (16 minutes ago) Update README.md - GabrielBetinV (origin/main, origin/HEAD)
* c3e22b9 - (6 years ago) Agregamos a Deadshot - Strider (tag: v2.0.0)
* 69e85f8 - (6 years ago) Actualizaciones al readme - Strid

- Realizamos el push para subir los cambios

NOTA => Tener en cuenta que se tiene configurado elpull para que se realice siempre y cuando
se tenga un fast forward, es decir que no se tenga conflictos en los cambios,

*** Git pull Rebase

Si tenemos un conflicto, digitamos esto  ya que habiamos configurado que hiciera elpull siempre uy cuando
exita un fast foward

git config pull.rebase true
git pull

Esto nos mostrara el conflicto para solucionar

al realizar git branch observaremos que no estamos en ninguna rama, porque estamos en un
rebase

(no branch, rebasing main)
  main


Hacemos un commit, si le doy git status nos mostrara que estamos en el rebase aun

git rebase --continue para terminar

git push para enviar el proyecto con los commits unificado


NOTA =>  Podemos configuar el pull rebase de manera global

git config --global pull.rebase true



** Markdown y Github Markdown

Etiquetas, es como el html 

# Encabezado 1
## Encabezado 2
### Encabezado 3


**Texto en negrita**
*Texto en cursiva*
***Texto en negrita y cursiva***


- Elemento de lista 1
- Elemento de lista 2
- Elemento de lista 3


1. Elemento numerado 1
2. Elemento numerado 2
3. Elemento numerado 3

[Texto del enlace](URL del enlace)

![Texto alternativo](URL de la imagen)

`Código en línea`

> Esto es una cita.

---

| Encabezado 1 | Encabezado 2 |
|--------------|--------------|
| Celda 1      | Celda 2      |
| Celda 3      | Celda 4      |


Markdown de GitHub
Tutorial de Markdown:

https://www.markdowntutorial.com/

GitHub Markdown sheet
https://docs.github.com/es

Emojis de GitHub
https://www.webfx.com/tools/emoji-cheat-sheet/


*** Buscar arcivos => Go to file

*** Raw, Blame, History, Edit and Delete

Raw => Ver archivo en crudo

Blame => VEr quien hizo el cambio

*** Crear archivo con Pull Request

Crear archivo en Guit HUB dentro de la carpeta historia

Al darle Crear Commits se abre una ventana y se seleeccionar un commits con pull request

Click en proponer cambios

Se abre la ventana Open a pull request

Seleccionarla rama, tambien se puede unir la rama

Crear pull rquest

Al duirigirnos a la pestaña Pull request,  se muestra que esta pendiente

Hasta que no se confirme el opull request no se pasa a la rama main
	
Para confirmar Crear merge pull requets => COnfimar merge

Se puede eliinar y restaurar los pull request

Ahora, podemos hacer pull en el repositorio local para traer el  cambio



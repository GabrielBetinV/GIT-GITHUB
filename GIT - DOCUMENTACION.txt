*** INSTALACIONES NECESARIOS

https://gist.github.com/Klerith/90a612344dc2d4e4455ea810fdacbe69

*** FUNDAMENTOS 

* git --version => Muestra la version de git,
cuando tiene -- la palabra es completa
si tiene un solo -, la palabra es abreviada

* git help => Ayudas para los comandos de git
* git clone = Clonar el repositorio
* git init,inicia el git
* git add, agrega los archivos al repositorio

* git help commit, comandos para los comandos del commit

*** CONFIGURACION DEL GIT, para dejar la marca en los commits con el nombre y el usuario
de manera local

*Nombre de usuario
git config --global user.name "Gabriel Betin Valdes"

* Email General
git config --global user.email "gabrielbetinvaldes@gmail.com"


** Validar si quedo configurado el usuario y el email

git config --global  -e

[user]
        name = Gabriel Betin Valdes
        email = gabrielbetinvaldes@gmail.com
[filter "lfs"]
        clean = git-lfs clean -- %f
        smudge = git-lfs smudge -- %f
        process = git-lfs filter-process
        required = true
[safe]
        directory = D:/VBA
        directory = D:/VBA
        directory = D:

Dentro del a pantalla con la letra a, se pueden realizar los cambios

para salir de esta pantalla se debe hacer lo siguiente

esc
se escribe :wq!
enter

*** PRIMER REPOSITORIO

* Se abre el proyecto (01-bases) en visual studio code o abrimos la carpeta desde
cualquier consola

* Digitar, git init para inicializar el repositorio

-- Anterriormente generaba un warning que solicitaba cambiar el nombre de
master a main o el que seleccione

git config --global init.defaultBranch <name>

Importante!
Se crea una carpeta .git, para verla hay que mostrar los archivos ocultos y OJO
no se puede borrar

* git status, muestra el estado del repositorio

-On branch master => Indica la rama

-Untracked files: muestra los archivos que se deben agregar

* git add, para agregar los archivos al stage

- se puede hacer de manera individual
git add index.html

si realizamos u n git status se mostrara ese archivo en verde, los que estan en el stage

Si queremos agregar todo digitamos, git add .   => Es importante el espacio y el punto para que tome todos
los cambios y los suba al stage

git status para ver todos los archivioos en verde

* git reset, elimina o quita del stage los archivos que no queremos guardar en el repositorio

git restet .DS_store

gi status, mostrara ese archivo en rojo indicando que no estara en el stage

* git commit -m "Primer commit",  para registrar el cambio (Codigo fuente actual)

Un commit representa un punto en el historial de cambios en el repositorio y contiene 
información sobre quién realizó el cambio.

Podemos ir a los commits en los tiempos, para ver recuperar el codigo en especial.

* git log, muestra el logs de los commits, al autor y la fecha

Si se presenta algun error con CRLF, digitar
git config core.autocrlf true

* Recuperar los commits

git checkout -- . (Con el punto) => Este comando reconstruye el proyecto hasta el ultimo commit

* git branch =>  Indica la rama en que se esta trabajando

 una rama (branch en inglés) es una línea de desarrollo independiente. 
 
Se recomienda no trabajar en la rama master, es que la que casi siempre se 
usa para produccion

* Renombrar la llama master de main de manera fglo

 git branch -m master main   -> Cambia la rama de master a main

con este comando cambiamos la rama de forma global y por defecto

git config --global init.defaultBranch main

git  config --global -e muestra la configuracion y el nombre de la rama por default

para salir :q!



* README

 es un archivo de texto en formato Markdown que se utiliza comúnmente 
en los proyectos de software para proporcionar información importante sobre el proyecto y su uso. 

*  git commit -am "Readme actualizado"

este comando hace el commit sin necesidad de digitar antes git add ., pero OJO
solo funciona con los archivos que se le estan haciendo seguimiento, los que tienen
U, esos NO

* git log, para ver los commit


** En ocasiones queremos realizar commits  por partes

podemos realizarlo por tipos de archivos

git add  *.html
git status

se pasaran al stage todos los archivos .html


*Tener en cuenta la raiz de las carpetas,si queremos guardar algo que
esta dentro de una carpeta se debe colocar la raiz ejempli

git add js/*.js

OJO, las carpetas vacias no las tiene en cuenta

Para el caso en que necesitemos que se guarde la carpeta,se
puede crear un archivo .gitkeep dentro de la carpeta

* Otra manera es, con 

git add css/

Este guarda todo lo que este dentro de la carpeta

* git status --short, solo muestra lo que se modifico

* * Alias
son una forma de crear comandos personalizados para realizar tareas comunes de manera más eficiente

https://gist.github.com/Klerith/0acf18bbece7923bcac55edb71b03c2b

git config  --global alias.s status --short

Con este comando podemos simpificar los comandos,  con git s se estaria consultando en realidad

 git status --short

* git log --oneline, muestra los logs con la informacion mas corta

* git log --oneline --decorate --all --graph
Este comando muestra de una forma personalizada los logs

* Utilicemos el alias del profe,

git config --global alias.lg "log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"

*** git diff, permite ver las diferencias o actualizaciones de los archivos

*** git diff --staged ,muestra los cambios realizados en lo que esta en el stage

*** Corregir nombres de commit
Con este comando  corregimos el nombre del ultimo commit

git commit --amend -m "Instalaciones Actualizadas"


*** Agregar un cambio en el ultimo commit realizado

git reset --soft HEAD^

asento circunflejo => ^ alt + 94 

Esto lo que hace es borrar el commit anterior, y se volveria a a agregar y commits para guardar el nuevo commit

Tambien se puede borrar cualquier commit anterior, colocando el indice

ejemplo git reset --soft HEAD^2

*** Otro uso del git commit --amend

sin el  -m, muestra informacion del ultimo commit el cual con la tecla A
podemos movernos a donde queremos editar, editamos........
luego la tecla esc , wq! t enter para salir

al revisar el log, el mensaje del ultimo commit ha cambiado

**  Con este comando podemos indicar el archivo que queremos modificar,
hacemos un commit cambiando el nombre.

git commit -am "Heroes.md: Agregamos a linterna verde" 

** git reset --soft 7e9796e, con el hash del commit podemos sacar del stage, agregar cambios y volver a hacer el commit

** git reset --mixed  bbbc1cb , el mixed sirve para devolverse al commit que queramos

** git reset --hard e89d6b9 , el hard a diferencia del mixed y el soft si es destructivo, borra los commit realizados 
posterior al hast que se coloque

** git reset --hard HEAD^,  con el head^ borramos el ultimo commit

APESAR DE ESTO GIT NO BORRA NADA, POR ESTO:

** git reflog,  muestra todo el historia completo de lo que a sucedido

** Ahora podemos irnos a cualquier commits realizado

git reset --hard 40a7ff1

** NOTA: Si solo quiero cambiar el nombre de un archivo podemos realizar
este comando que es practicamente mover el archivo al mismo directorio
pero cambiando el nombre

crear un archivo destruir-mundo.md 

git mv .\destruir-mundo.md salvar-mundo.md

realizamos el commit

git logs, y veremos que se hizo el cambio del nombre del archivo


** Remover archivos, 

git rm .\salvar-mundo.md, esto elimina el archivo

Ojo, esto no lo saca del staged

hacemos el commit para marcarlo como eliminado
git commit -m "Salvar-eliminado"


** Tambien podemos eliminar archivos fuera de git,

Al momento de renombrar un archivo git lo convierte en U, no le esta haciendo seguimiento

Entonces para confirmar debemos agregarlo y luego hacer el commits


** Mover a un commit sin perder el historial

En resumen, git reset --soft elimina los cambios confirmados, pero mantiene
 los cambios en el área de preparación, git reset --hard elimina todos los
 cambios confirmados y en el área de preparación sin posibilidad de recuperación, y 
git reset --mixed elimina los cambios confirmados y del área de preparación y l
os coloca en el árbol de trabajo como cambios no confirmados.


** Ignorar archivos

.gitignore

Creamos estos archivos y los agregamos al iognore para que no lo tenga en cuenta

dist/
node_modules/


  *.log

OJO, se debe hacer seguimiento  alarchivo .ignore

***RAMAS


** Creacion de una nueva rama

git branch rama-villanos, con este comando creamos la ramma

Consultamos las ramas existente con git branch

** Para movernos de ramas utilizamos el comando:

git checkout rama-villanos

nos muestra  el mensaje de que cambiamos de ramas

alrealizar git lg  se observa que la rama master y la nueva  apunta al ultimo commit

Agregando el gitignore - Strider (HEAD -> rama-villanos, master)

* Agregamos el cambio al stage

git add .

*Realizamos el commit y con git log se observa que la nueva rama apunta al commit mientras que
la rama master esta un commit antes

* 5f846d5 - (19 seconds ago) Primer commit de villanos - Gabriel Betin Valdes (HEAD -> rama-villanos)
* 62c8a10 - (6 years ago) Agregando el gitignore - Strider (master)


Al movernos a la rama master, el archivo villanos no aparecera, porque este
pertenece a la rama-villanos

** Si quiero unificar los cambios debo hacer un merget, pero
debo colocarme en la rama que espera los cambios

git merge rama-villanos

si sale Fast-forward se indica que  no hay conflictos en los cambios

Al realizar git lg obtendremos que las 2 ramas apuntando al ultimo commit
* f3157fa - (5 minutes ago) Villanos.md: Tercer commit de villanos - Gabriel Betin Valdes (HEAD -> master, rama-villanos)



** Es importante que al terminar una rama debemos borrar la rama nueva

git branch -d rama-villanos

En alguns ocasiones si hay cambios pendiente, git te informara 

si queremos que borre todo de manera forzada agregamos un -f

git branch -d rama-villanos -f

** Union automatica - Merge

* Creamos la nueva rama y nos movemos a ella con un solo comando

 git checkout -b rama-villanos

* Hacemos un cambio al arvhico de villanos y realizamos el commit

git commit -am "Agregamos a Doomsday"

Hacemos otro cambio y hacemos el commit

* Nos movemos a la rame master y borramos un  superheroe del archivo y hacemos el commit

Al realizar el git lg nos daremos cuenta de que existe una bifurcacion,
es decir laslineas cortadas de la  izquierda muestra los commits que pertenece a la rama-villanos y que el ultimo
commit pertenece a la rama master, 

* ba42d84 - (6 minutes ago) Borramos a Daredevil - Gabriel Betin Valdes (HEAD -> master)
| * 885c457 - (9 minutes ago) Agregamos Notas - Gabriel Betin Valdes (rama-villanos)
| * b2fd2a0 - (12 minutes ago) Agregamos a Doomsday - Gabriel Betin Valdes
|/

Ahora vamos a  unificar, traemos los cambios de rama-villano a la master

Ojo que debemos colocarnos en la rama master que es la que espera
los cambios

En este caso,  observaremos que los dos cambios se unieron

git merge rama-villanos

*   dbf4a53 - (44 seconds ago) Merge branch 'rama-villanos' - Gabriel Betin Valdes (HEAD -> master)
|\
| * 885c457 - (19 minutes ago) Agregamos Notas - Gabriel Betin Valdes (rama-villanos)
| * b2fd2a0 - (23 minutes ago) Agregamos a Doomsday - Gabriel Betin Valdes
* | ba42d84 - (17 minutes ago) Borramos a Daredevil - Gabriel Betin Valdes
|/

Esta union es sin conflicto, ahora veamos un ejemplo con archivos que si tienen conflictos

**  Uniones con conflictos,

 Se dan cuando se moidifcam los mismos fuentes entre  compañeros.
por ejemplo se modifica de formas diferenctes e independientes unalinea
especifica

Se realiza el commit en cada una de las ramas independientes

Al momento de hacer elmerge, se mostraran los codigos que tienen conflico

se corrige el error y se hace el commits


** Etiquetas Tags

Las etiquetas son referencias que apuntan a puntos concretos en el historial de Git

** Creando Etiquetas Tags "git tag"

git tag super-release

git tag, lista los tags

* Tambien se puede elimnar un tag

git tag -d super-release

**Creamos un tag con nombre esoecifico
 
 git tag -a v.1.0.0 -m "Version 1.0.0 lista"

** Para ver el tags con iformacion completa

git show v.1.0.0








